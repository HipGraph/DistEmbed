#include <memory>#include <iostream>#include <mpi.h>#include <vector>#include <stdlib.h>#include "../include/DistBlas/Process3DGrid.hpp"using namespace std;using namespace distblas::core;int main(int argc, char** argv) {	int nr = atoi(argv[0]);	int nc = atoi(argv[1]);	int nl = atoi(argv[2]);	int adj = atoi(argv[3]);	MPI_Init(&argc, &argv);	auto grid = unique_ptr<Process3DGrid>(new Process3DGrid(nr,nc,nl,adj));	grid.get()->gather_and_pretty_print("Global Ranks",grid.get()->global_rank);	grid.get()->gather_and_pretty_print("i values",grid.get()->i);	grid.get()->gather_and_pretty_print("j values",grid.get()->j);	grid.get()->gather_and_pretty_print("k values",grid.get()->k);	int buf;	buf = grid.get()->i;	MPI_Bcast(&buf, 1, MPI_INT, 0, grid.get()->row_world);	grid.get()->gather_and_pretty_print("Row Broadcast:",buf);	buf = grid.get()->j;	MPI_Bcast(&buf, 1, MPI_INT, 0, grid.get()->col_world);	grid.get()->gather_and_pretty_print("Col Broadcast:",buf);	buf = grid.get()->i + grid.get()->nr * grid.get()->j;	MPI_Bcast(&buf, 1, MPI_INT, 0, grid.get()->fiber_world);	grid.get()->gather_and_pretty_print("Fiber Broadcast:",buf);	buf = grid.get()->k;	MPI_Bcast(&buf, 1, MPI_INT, 0, grid.get()->rowcol_slice);	grid.get()->gather_and_pretty_print("Row Column Slice Broadcast:",buf);	buf = grid.get()->i;	MPI_Bcast(&buf, 1, MPI_INT, 0, grid.get()->colfiber_slice);	grid.get()->gather_and_pretty_print("Column Fiber Slice Broadcast:",buf);	buf = grid.get()->j;	MPI_Bcast(&buf, 1, MPI_INT, 0, grid.get()->rowfiber_slice);	grid.get()->gather_and_pretty_print("Row Fiber Slice Broadcast:",buf);	MPI_Finalize();}